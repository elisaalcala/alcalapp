name: Master Release

on:
  push:
    branches:
      - master  # Activa el workflow en cada push a la rama master

jobs:
  release:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"  # Verifica que el mensaje de commit no contenga [skip ci]
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: elisaalcala/mydb:latest
        env:
          MYSQL_ROOT_PASSWORD: 3301
          MYSQL_DATABASE: alcalapp_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost" --health-interval=10s --health-timeout=5s --health-retries=3
    
    env: # Entorno global
      DB_URL: jdbc:mysql://localhost:3306/alcalapp_db?serverTimezone=UTC
      DB_USERNAME: root
      DB_PASSWORD: 3301
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean install --file pom.xml
  
      - name: Run tests
        run: mvn test
  
      - name: Check code coverage
        run: |
          mvn jacoco:report # Genera el informe de cobertura de JaCoCo
      
          # Extraer los valores de cobertura y total de instrucciones
          COVERED=$(grep -oP '<counter type="INSTRUCTION" missed="\d+" covered="\d+"' target/site/jacoco/jacoco.xml | \
                    awk -F'covered="' '{sum_covered += $2} END {print sum_covered}')
          MISSED=$(grep -oP '<counter type="INSTRUCTION" missed="\d+" covered="\d+"' target/site/jacoco/jacoco.xml | \
                   awk -F'missed="' '{sum_missed += $2} END {print sum_missed}')
          TOTAL=$(( COVERED + MISSED ))
      
          if [ "$TOTAL" -eq 0 ]; then
            echo "No coverage data found. Failing the build."
            exit 1
          fi
      
          COVERAGE_PERCENT=$(( 100 * COVERED / TOTAL ))
          echo "coverage: $COVERED%"
          echo "Code total: $TOTAL%"
          echo "Code coverage percentage: $COVERAGE_PERCENT%"
      
          if [ "$COVERAGE_PERCENT" -lt 60 ]; then
            echo "Code coverage is below 80% ($COVERAGE_PERCENT%). Failing the build."
            exit 1
          fi

      - name: Get Current Version
        id: get_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      - name: Remove SNAPSHOT from Version
        run: |
          RELEASE_VERSION=$(echo ${{ env.CURRENT_VERSION }} | sed 's/-SNAPSHOT//')
          mvn versions:set -DnewVersion=$RELEASE_VERSION
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Commit and push release version
        run: |
          git config --global user.name "elisaalcala"
          git config --global user.email "elisaalcgue@gmail.com"
          git add pom.xml
          git commit -m "Release version ${RELEASE_VERSION} [skip ci]"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create new tag for release
        run: |
          git tag -a "v${RELEASE_VERSION}" -m "Release version ${RELEASE_VERSION}"
          git push origin "v${RELEASE_VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
